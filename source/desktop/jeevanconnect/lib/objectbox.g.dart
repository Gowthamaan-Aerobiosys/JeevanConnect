// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'src/features/authentication/domain/user.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 5035567386852497709),
      name: 'User',
      lastPropertyId: const obx_int.IdUid(18, 5010352615001895560),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2691367085505779055),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4423415689842578655),
            name: 'email',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3259061823773728463),
            name: 'isConfirmed',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 4929293552003473779),
            name: 'isActive',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 6480968922763525114),
            name: 'isAdmin',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 1169599623427080146),
            name: 'firstName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 4915407172278130659),
            name: 'lastName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 4669600547995281886),
            name: 'userId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 7060099801453523325),
            name: 'registeredId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 5010862844834402001),
            name: 'designation',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 2558713404878746377),
            name: 'sessionId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 378072991412596862),
            name: 'csrfToken',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 5945778551864986884),
            name: 'emails',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 4289515541948602565),
            name: 'phoneNumbers',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 7665686997835589673),
            name: 'contact',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 311886117506916123),
            name: 'createdAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(17, 8498689914722561578),
            name: 'lastModified',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(18, 5010352615001895560),
            name: 'passwordChangedAt',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(1, 5035567386852497709),
      lastIndexId: const obx_int.IdUid(0, 0),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    User: obx_int.EntityDefinition<User>(
        model: _entities[0],
        toOneRelations: (User object) => [],
        toManyRelations: (User object) => {},
        getId: (User object) => object.id,
        setId: (User object, int id) {
          object.id = id;
        },
        objectToFB: (User object, fb.Builder fbb) {
          final emailOffset = fbb.writeString(object.email);
          final firstNameOffset = fbb.writeString(object.firstName);
          final lastNameOffset = fbb.writeString(object.lastName);
          final userIdOffset = fbb.writeString(object.userId);
          final registeredIdOffset = fbb.writeString(object.registeredId);
          final designationOffset = fbb.writeString(object.designation);
          final sessionIdOffset = fbb.writeString(object.sessionId);
          final csrfTokenOffset = fbb.writeString(object.csrfToken);
          final emailsOffset = fbb.writeList(
              object.emails.map(fbb.writeString).toList(growable: false));
          final phoneNumbersOffset = fbb.writeList(
              object.phoneNumbers.map(fbb.writeString).toList(growable: false));
          fbb.startTable(19);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, emailOffset);
          fbb.addBool(2, object.isConfirmed);
          fbb.addBool(3, object.isActive);
          fbb.addBool(4, object.isAdmin);
          fbb.addOffset(5, firstNameOffset);
          fbb.addOffset(6, lastNameOffset);
          fbb.addOffset(7, userIdOffset);
          fbb.addOffset(8, registeredIdOffset);
          fbb.addOffset(9, designationOffset);
          fbb.addOffset(10, sessionIdOffset);
          fbb.addOffset(11, csrfTokenOffset);
          fbb.addOffset(12, emailsOffset);
          fbb.addOffset(13, phoneNumbersOffset);
          fbb.addInt64(14, object.contact);
          fbb.addInt64(15, object.createdAt.millisecondsSinceEpoch);
          fbb.addInt64(16, object.lastModified.millisecondsSinceEpoch);
          fbb.addInt64(17, object.passwordChangedAt?.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final passwordChangedAtValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 38);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final firstNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final lastNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final emailParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final userIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 18, '');
          final registeredIdParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 20, '');
          final designationParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 22, '');
          final contactParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 32, 0);
          final isConfirmedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 8, false);
          final isActiveParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 10, false);
          final isAdminParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 12, false);
          final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 34, 0));
          final sessionIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 24, '');
          final emailsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 28, []);
          final phoneNumbersParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 30, []);
          final csrfTokenParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 26, '');
          final lastModifiedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 36, 0));
          final passwordChangedAtParam = passwordChangedAtValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(passwordChangedAtValue);
          final object = User(
              id: idParam,
              firstName: firstNameParam,
              lastName: lastNameParam,
              email: emailParam,
              userId: userIdParam,
              registeredId: registeredIdParam,
              designation: designationParam,
              contact: contactParam,
              isConfirmed: isConfirmedParam,
              isActive: isActiveParam,
              isAdmin: isAdminParam,
              createdAt: createdAtParam,
              sessionId: sessionIdParam,
              emails: emailsParam,
              phoneNumbers: phoneNumbersParam,
              csrfToken: csrfTokenParam,
              lastModified: lastModifiedParam,
              passwordChangedAt: passwordChangedAtParam);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [User] entity fields to define ObjectBox queries.
class User_ {
  /// See [User.id].
  static final id = obx.QueryIntegerProperty<User>(_entities[0].properties[0]);

  /// See [User.email].
  static final email =
      obx.QueryStringProperty<User>(_entities[0].properties[1]);

  /// See [User.isConfirmed].
  static final isConfirmed =
      obx.QueryBooleanProperty<User>(_entities[0].properties[2]);

  /// See [User.isActive].
  static final isActive =
      obx.QueryBooleanProperty<User>(_entities[0].properties[3]);

  /// See [User.isAdmin].
  static final isAdmin =
      obx.QueryBooleanProperty<User>(_entities[0].properties[4]);

  /// See [User.firstName].
  static final firstName =
      obx.QueryStringProperty<User>(_entities[0].properties[5]);

  /// See [User.lastName].
  static final lastName =
      obx.QueryStringProperty<User>(_entities[0].properties[6]);

  /// See [User.userId].
  static final userId =
      obx.QueryStringProperty<User>(_entities[0].properties[7]);

  /// See [User.registeredId].
  static final registeredId =
      obx.QueryStringProperty<User>(_entities[0].properties[8]);

  /// See [User.designation].
  static final designation =
      obx.QueryStringProperty<User>(_entities[0].properties[9]);

  /// See [User.sessionId].
  static final sessionId =
      obx.QueryStringProperty<User>(_entities[0].properties[10]);

  /// See [User.csrfToken].
  static final csrfToken =
      obx.QueryStringProperty<User>(_entities[0].properties[11]);

  /// See [User.emails].
  static final emails =
      obx.QueryStringVectorProperty<User>(_entities[0].properties[12]);

  /// See [User.phoneNumbers].
  static final phoneNumbers =
      obx.QueryStringVectorProperty<User>(_entities[0].properties[13]);

  /// See [User.contact].
  static final contact =
      obx.QueryIntegerProperty<User>(_entities[0].properties[14]);

  /// See [User.createdAt].
  static final createdAt =
      obx.QueryDateProperty<User>(_entities[0].properties[15]);

  /// See [User.lastModified].
  static final lastModified =
      obx.QueryDateProperty<User>(_entities[0].properties[16]);

  /// See [User.passwordChangedAt].
  static final passwordChangedAt =
      obx.QueryDateProperty<User>(_entities[0].properties[17]);
}
